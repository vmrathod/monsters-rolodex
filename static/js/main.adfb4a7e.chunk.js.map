{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchText","target","value","state","fetch","then","response","json","users","console","log","this","filteredMoster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GACjB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,6BAAKL,EAAMI,QAAQE,WCHdC,G,MAAW,SAAAP,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAACL,GAClB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJ5BK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCiCjEG,E,kDAhCb,aAAe,IAAD,8BACZ,gBAMFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SANpC,EAAKC,MAAQ,CACXb,SAAU,GACVU,WAAW,IAJD,E,qDAUd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAE7C,WACEC,QAAQC,IAAIC,MADL,MAEuBA,KAAKR,MAA5Bb,EAFA,EAEAA,SAASU,EAFT,EAESA,WACVY,EAAiBtB,EAASuB,QAAO,SAAC3B,GACtC,OAAOA,EAAQE,KAAK0B,cAAcC,SAASf,EAAWc,kBAExD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,YAAY,kBAAkBC,aAAciB,KAAKjB,eAC5D,cAAC,EAAD,CAAUJ,SAAUsB,W,GA1BVI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.adfb4a7e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\nexport const Card = (props) =>{\r\n    return (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}></img>\r\n        <h1>{props.monster.name}</h1>\r\n    </div>\r\n    \r\n    );\r\n}","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport './card-list.styles.css';\r\nexport const CardList = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map((monster) => {\r\n               return <Card key={monster.id} monster={monster}></Card>\r\n            })}\r\n        </div>\r\n    );\r\n\r\n\r\n}","import React from \"react\";\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n)\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport {SearchBox}  from './components/search-box/search-box-component';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchText:''\n    }\n  }\n  handleChange=(e)=>{\n    this.setState({searchText: e.target.value})\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n  render() {\n    console.log(this);\n    const {monsters,searchText} = this.state;\n    const filteredMoster = monsters.filter((monster)=>{\n      return monster.name.toLowerCase().includes(searchText.toLowerCase());\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search Monsters\" handleChange={this.handleChange } />\n        <CardList monsters={filteredMoster}></CardList>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}